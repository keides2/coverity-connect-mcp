[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "coverity-connect-mcp"
version = "1.0.0"
description = "Model Context Protocol server for Black Duck Coverity Connect static analysis platform"
authors = [
    {name = "Coverity MCP Contributors", email = "noreply@github.com"}
]
maintainers = [
    {name = "Coverity MCP Contributors", email = "noreply@github.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
keywords = [
    "coverity",
    "black-duck",
    "static-analysis", 
    "mcp",
    "model-context-protocol",
    "security",
    "code-quality",
    "user-management",
    "synopsys",
    "claude",
    "ai-assistant"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "mcp>=1.0.0",
    # "fastmcp>=0.1.0",
    "aiohttp>=3.8.0",
    "suds-community>=1.1.2",
    "requests>=2.31.0",
    "pandas>=1.5.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "PyYAML>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]
docker = [
    "gunicorn>=21.0.0",
    "uvicorn>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/keides2/coverity-connect-mcp"
Documentation = "https://keides2.github.io/coverity-connect-mcp"
Repository = "https://github.com/keides2/coverity-connect-mcp.git"
Issues = "https://github.com/keides2/coverity-connect-mcp/issues"
Changelog = "https://github.com/keides2/coverity-connect-mcp/blob/main/CHANGELOG.md"
Discussions = "https://github.com/keides2/coverity-connect-mcp/discussions"

[project.scripts]
coverity-mcp = "coverity_mcp_server.main:cli"
coverity-mcp-server = "coverity_mcp_server.main:run_server"

[project.entry-points."mcp.servers"]
coverity-connect = "coverity_mcp_server.main:create_server"

[tool.hatch.build.targets.wheel]
packages = ["src/coverity_mcp_server"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "docs/",
    "examples/",
    "tests/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["coverity_mcp_server"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "suds.*",
    "suds_community.*",
    "covautolib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=coverity_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/coverity_mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py38"
extend-exclude = [
    "docs",
    ".venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]
